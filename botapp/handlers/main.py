import asyncio
import re

from pyrogram import Client, filters
from pyrogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton
)


@Client.on_message(filters.command("help", ["/", ".", "?"]))
async def helper(client, message):
    asyncio.ensure_future(
        client.send_message(
            message.from_user.id,
            f"Hello, {message.from_user.first_name}! I am the test bot 'P.C.Observer'. "
            "My job is to turn on and off the applications on your computer if u want to start "
            "or just print /start")
    )
    return


@Client.on_message(filters.command("start", ["/", ".", "?"]))
async def start(client, message):
    markup = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üëã –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É")],
        ],
        resize_keyboard=True
    )
    asyncio.ensure_future(
        client.send_message(
            message.from_user.id,
            text=f"Hello, {message.from_user.first_name}! I am the test bot 'P.C.Observer'. "
                 "My job is to turn on and off the "
                 "applications on your computer",
            reply_markup=markup
        )
    )
    return


@Client.on_message(
    filters.text &
    (
        filters.regex(re.compile(r"^üëã –ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É$"))
        | filters.regex(re.compile(r"^ü´° –°–æ–∑–¥–∞—Ç—å –¢–æ–∫–µ–Ω$"))
    ),
    group=1)
async def process_operations(client, message):
    pass



'''
@Client.on_message(
    filters.text &
    (filters.regex(re.compile(r"^–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ$"))
    | filters.regex(re.compile(r"^–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞$"))
    | filters.regex(re.compile(r"^–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∏–ª–µ—Ç$"))
    | filters.regex(re.compile(r"^–û—Ç–º–µ–Ω–∏—Ç—å$"))),
    group=1)
async def process_reply_buttons(client, message):
    tgm_id = message.from_user.id

    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
        await client.send_message(
            tgm_id,
            "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=ForceReply()
        )

    elif message.text == "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await client.send_message(
            tgm_id,
            "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –±–∏–ª–µ—Ç–æ–º.",
            reply_markup=ForceReply()
        )

    elif message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∏–ª–µ—Ç":
        bot.dialogs.register_next_step(tgm_id, make_transfer)
        await bot.dialogs.make_step(tgm_id, client, user, message)

    elif message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        bot.dialogs.clear(tgm_id)
        await client.send_message(
            tgm_id,
            "–û—Ç–ø—Ä–∞–≤–∫–∞ –±–∏–ª–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )

    return
'''